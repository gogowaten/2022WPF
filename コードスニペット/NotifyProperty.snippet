<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>変更通知プロパティ(改行あり)</Title>
			<Author>gogowaten</Author>
			<Description>通知はOnPropertyChnged</Description>
			<Shortcut>proponp</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>type</ID>
					<Default>int</Default>
				</Literal>
				<Literal>
					<ID>id</ID>
					<Default>prop</Default>
				</Literal>
				<Literal>
					<ID>Id</ID>
					<Default>Prop</Default>
				</Literal>
			</Declarations>
			<Code Language="csharp">
				<![CDATA[
private $type$ $id$;
public $type$ $Id$
{
	get => $id$;
	set
	{
		if ($id$ == value) return;
		$id$ = value; OnPropertyChanged();
	}
}
						]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>変更通知プロパティ(改行無し)</Title>
			<Author>gogowaten</Author>
			<Description>通知はOnPropertyChnged</Description>
			<Shortcut>proponpr</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>type</ID>
					<Default>int</Default>
				</Literal>
				<Literal>
					<ID>id</ID>
					<Default>prop</Default>
				</Literal>
				<Literal>
					<ID>Id</ID>
					<Default>Prop</Default>
				</Literal>
			</Declarations>
			<Code Language="csharp">
				<![CDATA[
private $type$ $id$;
public $type$ $Id${get => $id$;	set	{if ($id$ == value) return; $id$ = value; OnPropertyChanged();}}
						]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>変更通知プロパティ(改行無し2)</Title>
			<Author>gogowaten</Author>
			<Description>通知はSetPropertyChnged、スニペットpropsetとともに使う</Description>
			<Shortcut>props</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>type</ID>
					<Default>int</Default>
				</Literal>
				<Literal>
					<ID>id</ID>
					<Default>prop</Default>
				</Literal>
				<Literal>
					<ID>Id</ID>
					<Default>Prop</Default>
				</Literal>
			</Declarations>
			<Code Language="csharp">
				<![CDATA[
private $type$ $id$;
public $type$ $Id${get => $id$;	set	=> SetProperty(ref $id$, value);}
						]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>変更通知プロパティのイベント起動</Title>
			<Author>gogowaten</Author>
			<Description>通知はSetPropertyChnged、Valueと比較して違ったら更新して通知</Description>
			<Shortcut>propset</Shortcut>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
protected void SetProperty<T>(ref T field, T value, [System.Runtime.CompilerServices.CallerMemberName] string? name = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value)) return;
            field = value;
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
						]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>依存プロパティ作成nameof使用</Title>
			<Author>gogowaten</Author>
			<Description>登録名をnameofで指定</Description>
			<Shortcut>propdpn</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>type</ID>
					<Default>int</Default>
				</Literal>
				<Literal>
					<ID>id</ID>
					<Default>MyProperty</Default>
				</Literal>
				<Literal>
					<ID>ownerclass</ID>
					<Default>ownerclass</Default>
				</Literal>
				<Literal>
					<ID>metadata</ID>
					<Default>0</Default>
				</Literal>
			</Declarations>
			<Code Language="csharp">
				<![CDATA[
        public $type$ $id$
        {
            get { return ($type$)GetValue($id$Property); }
            set { SetValue($id$Property, value); }
        }
        public static readonly DependencyProperty $id$Property =
            DependencyProperty.Register(nameof($id$), typeof($type$), typeof($ownerclass$), new PropertyMetadata($metadata$));
						]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>依存プロパティ作成、Shape継承クラス用</Title>
			<Author>gogowaten</Author>
			<Description>デザイン画面で値変更したときに図形サイズと表示を即更新＋双方向Binding</Description>
			<Shortcut>propdps</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>type</ID>
					<Default>int</Default>
				</Literal>
				<Literal>
					<ID>id</ID>
					<Default>MyProperty</Default>
				</Literal>
				<Literal>
					<ID>ownerclass</ID>
					<Default>ownerclass</Default>
				</Literal>
				<Literal>
					<ID>metadata</ID>
					<Default>0</Default>
				</Literal>
			</Declarations>
			<Code Language="csharp">
				<![CDATA[
        public $type$ $id$
        {
            get { return ($type$)GetValue($id$Property); }
            set { SetValue($id$Property, value); }
        }
        public static readonly DependencyProperty $id$Property =
            DependencyProperty.Register(nameof($id$), typeof($type$), typeof($ownerclass$),
				new FrameworkPropertyMetadata($metadata$,
					FrameworkPropertyMetadataOptions.AffectsRender |
					FrameworkPropertyMetadataOptions.AffectsMeasure |
					FrameworkPropertyMetadataOptions.BindsTwoWayByDefault));
						]]>
			</Code>
		</Snippet>
	</CodeSnippet>

</CodeSnippets>